<?xml version="1.0" encoding="UTF-8"?>
<!-- Note: this language definition file adds support for Markdown Extra syntax,
     described here:
     * (fr) <http://michelf.com/projets/php-markdown/extra/>
     * (en) <http://michelf.com/projects/php-markdown/extra/> -->
<language id="markdown-extra-tech" _name="MarkdownExtraTech" version="2.0" _section="Markup">
  <metadata>
    <property name="mimetypes">text/x-markdown</property>
    <!--<property name="globs">*.markdown;*.md;*.mkd</property>-->
    <property name="block-comment-start">&lt;!--</property>
    <property name="block-comment-end">--&gt;</property>
  </metadata>

  <styles>
    <!-- Markdown styles. -->
    
    <!-- Evaluated -->
    <style id="language-code-block" _name="Language Code Block" />
    <style id="ipsum" _name="Ipsum" />
    <style id="header" _name="Header" />
    <style id="header-id-marker" _name="Header Id Marker" />
    <style id="attribute-value" _name="Attribute Value" />
    <style id="attribute-braces" _name="Attribute Braces" />
    <style id="link-text" _name="Link Text"/>
    <style id="link-url" _name="Link Url" />
    <style id="link-brackets" _name="Link Brackets" />
    <style id="link-label" _name="Link Label" />
    <style id="link-automatic" _name="Link Automatic" />
    <style id="image-marker" _name="Image Marker"/>
    <style id="image-brackets" _name="Image Brackets"/>
    <style id="custom-attributes-braces" _name="Custom Attributes Braces" />
    <style id="custom-attributes-gallery" _name="Custom Attributes Gallery" />
    <style id="custom-attributes-video" _name="Custom Attributes Video" />
    <style id="custom-attributes-generic" _name="Custom Attributes Generic" />
    
        
    <!--  -->

    <style id="horizontal-rule" _name="Horizontal Rule" map-to="def:type"/>
    <style id="list-marker" _name="List Marker" map-to="def:statement"/>
    <style id="code" _name="Code" map-to="def:identifier"/>
    <style id="blockquote-marker" _name="Blockquote Marker" map-to="def:shebang"/>
    
    
    <style id="emphasis" _name="Emphasis" map-to="def:doc-comment-element"/>
    <style id="strong-emphasis" _name="Strong Emphasis" map-to="def:statement"/>
    <style id="backslash-escape" _name="Backslash Escape" map-to="def:special-char"/>
    <style id="line-break" _name="Line Break" map-to="def:note"/>

    <!-- Markdown Extra styles. -->
    <style id="definition-list-marker" _name="Definition List Marker" map-to="def:shebang"/>
    <style id="footnote-marker" _name="Footnote Marker" map-to="def:shebang"/>
    <style id="abbreviation-marker" _name="Abbreviation Marker" map-to="def:shebang"/>
    <style id="abbreviation" _name="Abbreviation" map-to="def:preprocessor"/>
    <style id="table-separator" _name="Table Separator" map-to="def:statement"/>
  </styles>

  <definitions>
    <!-- _______________________ Markdown contexts. _______________________ -->  
  
  	<context id="ipsum" style-ref="ipsum"> <!-- TO BE REMOVED -->
      <match>ipsum</match>
    </context>
    
    <!-- Examples:
         Header 1
         ========
         Header 2
         -
    -->
    <!-- Note: line break can't be used in regex, so only underline is matched. -->
    <context id="setext-header" style-ref="header">
      <match>^(-+|=+)[ \t]*$</match>
    </context>

    <!-- Examples:
         - - -
         **  **  **  **  **
         _____
    -->
    <context id="horizontal-rule" style-ref="horizontal-rule">
      <match extended="true">
        ^[ ]{0,3}            # Maximum 3 spaces at the beginning of the line.
        (
          (-[ ]{0,2}){3,} | # 3 or more hyphens, with 2 spaces maximum between each hyphen.
          (_[ ]{0,2}){3,} | # Idem, but with underscores.
          (\*[ ]{0,2}){3,}  # Idem, but with asterisks.
        )
        [ \t]*$              # Optional trailing spaces or tabs.
      </match>
    </context>

    <!-- Note about following list and code block contexts: according to the
         Markdown syntax, to write several paragraphs in a list item, we have
         to indent each paragraph. Example:

         - Item A (paragraph 1).

             Item A (paragraph 2).

             Item A (paragraph 3).

         - Item B.

         So there is a conflict in terms of syntax highlighting between an
         indented paragraph inside a list item (4 spaces or 1 tab) and an
         indented line of code outside a list (also 4 spaces or 1 tab). In this
         language file, since a full context analysis can't be done (because
         line break can't be used in regex), the choice was made ​​to highlight
         code block only from 2 levels of indentation. -->

    <!-- Example (unordered list):
         * Item
         + Item
         - Item

         Example (ordered list):
         1. Item
         2. Item
         3. Item
    -->
    <context id="list" style-ref="list-marker">
      <match extended="true">
        ^[ ]{0,3}  # Maximum 3 spaces at the beginning of the line.
        (
          \*|\+|-| # Asterisk, plus or hyphen for unordered list.
          [0-9]+\. # Number followed by period for ordered list.
        )
        [ \t]+     # Must be followed by at least 1 space or 1 tab.
      </match>
    </context>

    <!-- Example:
                 <em>HTML code</em> displayed <strong>literally</strong>.
    -->
    <context id="code-block" class="no-spell-check">
      <match>^( {8,}|\t{2,})([^ \t]+.*)</match>

      <include>
        <context sub-pattern="2" style-ref="code"/>
      </include>
    </context>

    <!-- Note about following code span contexts: within a paragraph, text
         wrapped with backticks indicates a code span. Markdown allows to use
         one or more backticks to wrap text, provided that the number is identical
         on both sides, and the same number of consecutive backticks is not
         present within the text. The current language file supports code span
         highlighting with up to 2 backticks surrounding text. -->

    <!-- Examples:
         Here's a literal HTML tag: `<p>`.
         `Here's a code span containing ``backticks``.`
    -->
    <context id="1-backtick-code-span" class="no-spell-check" style-ref="code">
      <match>(?&lt;!`)`[^`]+(`{2,}[^`]+)*`(?!`)</match>
    </context>

    <!-- Examples:
         Here's a literal HTML tag: ``<p>``.
         ``The grave accent (`) is used in Markdown to indicate a code span.``
         ``Here's another code span containing ```backticks```.``
    -->
    <context id="2-backticks-code-span" class="no-spell-check" style-ref="code">
      <match>(?&lt;!`)``[^`]+((`|`{3,})[^`]+)*``(?!`)</match>
    </context>

    <!-- Example:
         > Quoted text.
         > Quoted text with `code span`.
         >> Blockquote nested.
    -->
    <!-- Note: blockquote can contain block-level and inline Markdown elements,
         but the current language file only highlights inline ones (emphasis,
         link, etc.). -->
    <context id="blockquote" end-at-line-end="true">
      <start>^( {0,3}&gt;(?=.)( {0,4}&gt;)*)</start>

      <include>
        <context sub-pattern="1" where="start" style-ref="blockquote-marker"/>
        <context ref="1-backtick-code-span"/>
        <context ref="2-backticks-code-span"/>
        <context ref="automatic-link"/>
        <context ref="inline-link"/>
        <context ref="reference-link"/>
        <context ref="inline-image"/>
        <context ref="reference-image"/>
        <context ref="underscores-emphasis"/>
        <context ref="asterisks-emphasis"/>
        <context ref="underscores-strong-emphasis"/>
        <context ref="asterisks-strong-emphasis"/>
        <context ref="backslash-escape"/>
        <context ref="line-break"/>
      </include>
    </context>

    <!-- Examples:
         <user@example.com>
         <http://www.example.com/>
    -->
    <!-- Note: regular expressions are based from function `_DoAutoLinks` from
         Markdown.pl (see <http://daringfireball.net/projects/markdown/>). -->
    <context id="automatic-link" class="no-spell-check"> <!-- OK -->
      <match case-sensitive="false" extended="true">
        &lt;(?!\?)
          (((mailto:)?[a-z0-9.-]+\@[-a-z0-9]+(\.[-a-z0-9]+)*\.[a-z]+) | # E-mail.
          ((https?|ftp):[^'">\s]+))                                     # URL.
        &gt;
      </match>

      <include>
      	<context sub-pattern="0" style-ref="link-automatic"/>
        <context sub-pattern="1" style-ref="link-url"/>
      </include>
    </context>

    <!-- Examples:
         Lorem *ipsum dolor* sit amet.
         Here's an *emphasized text containing an asterisk (\*)*.
    -->
    <context id="asterisks-emphasis" style-ref="emphasis">
      <match>(?&lt;!\*)\*[^\* \t].*?(?&lt;!\\|\*| |\t)\*(?!\*)</match>
    </context>

    <!-- Examples:
         Lorem **ipsum dolor** sit amet.
         Here's a **strongly emphasized text containing an asterisk (\*).**
    -->
    <context id="asterisks-strong-emphasis" style-ref="strong-emphasis">
      <match>\*\*[^\* \t].*?(?&lt;!\\|\*| |\t)\*\*</match>
    </context>

    <context id="backslash-escape" style-ref="backslash-escape">
      <match>\\[\\`*_{}\[\]()#+-.!]</match>
    </context>

    <!-- Note: a manual line break should be followed by a line containing text,
         but since line break can't be used in regex, only trailing spaces or tabs
         are matched. -->
    <context id="line-break">
      <match>(?&lt;=[^ \t])([ \t]{2,})$</match>

      <include>
        <context sub-pattern="1" style-ref="line-break"/>
      </include>
    </context>

    <!-- _________ Markdown contexts redefined for Markdown Extra. _________ -->
    
    <!-- OK -->
    <define-regex id="header-id-attribute" extended="true">
      (?&lt;=[ \t])       		# Must be preceded by a space or a tab.
      (\{)                  	# Literal curly bracket.
        (\#)              		# Literal hash.
        ([-_:a-zA-Z0-9]+)\s* 	# Id.
      (\})                  	# Literal curly bracket.
      [ \t]*              		# Optional trailing spaces or tabs.
    </define-regex>
    
    <!-- Examples:
         # Header 1 # {#id1}
         ## Header 2 {#id2}
         ###Header 3###
    -->
    <context id="atx-header"> <!-- OK -->
      <match>^(#+.+?)\%{header-id-attribute}?$</match>

      <include>
        <context sub-pattern="1" style-ref="header"/>
        <context sub-pattern="2" style-ref="attribute-braces"/>
        <context sub-pattern="3" style-ref="header-id-marker"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="5" style-ref="attribute-braces"/>
      </include>
    </context>

    <!-- Note about following link and image contexts: link and image are not matched if link text, link label, alt text or image label begin with a circumflex (because it's the syntax used for footnotes references), even if in some tricky cases, they could begin with a circumflex and still be well-formed. However, it's very unlikely that a well-formed link or image will not be highlighted. -->

    <!-- Examples matched:
         [link text](http://www.example.com/)
         [link text](<http://www.example.com/>)
         [link text]( /folder/page.html "Title" )

         Example NOT matched:
         [^link text](http://www.example.com/)
    -->
    <context id="inline-link"> <!-- OK (?&lt;!\!)(\[)(?!\^)(.*?)(\])  -->
      <match extended="true">
        (?&lt;!\!)(\[)(?!\^)([^\!]*?)(\])    # Link text.
        (\()                   # Literal opening parenthesis.
          [ \t]*               # Optional spaces or tabs after the opening parenthesis.
          (&lt;(.*?)&gt; |     # URL with brackets.
          (.*?))               # URL without brackets.
          ([ \t]+(".*?"))?     # Optional title.
          [ \t]*               # Optional spaces or tabs before the closing parenthesis.
        (\))                   # Literal closing parenthesis.
      </match>

      <include>
      	<context sub-pattern="1" style-ref="link-brackets"/>
        <context sub-pattern="2" style-ref="link-text"/>
        <context sub-pattern="3" style-ref="link-brackets"/>
        <context sub-pattern="4" style-ref="link-brackets"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="7" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="9" style-ref="attribute-value"/>
        <context sub-pattern="10" style-ref="link-brackets"/>
      </include>
    </context>

    <!-- Examples matched:
         [link text]
         [link text][]
         [link text][link label]
         [link text] [link label]

         Examples NOT matched:
         [^link text][link label]
         [link text][^link label]
    -->
    <!-- Note: some assertions are used to differentiate reference link from
         link label. -->
    <context id="reference-link"> <!-- OK -->
      <match>(?&lt;!^ |^  |^   |\!|\])(\[)(?!\^)(?!\!)(.*?)(\])([ \t]?(\[)(?!\^)(.*?)(\]))?(?!:)</match>

      <include>
      	<context sub-pattern="1" style-ref="link-brackets"/>
        <context sub-pattern="2" style-ref="link-text"/>
        <context sub-pattern="3" style-ref="link-brackets"/>
        <!-- sub-pattern 4 = all the optional link-label including brackets, ex. [google link] -->
        <context sub-pattern="5" style-ref="link-brackets"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="7" style-ref="link-brackets"/>
      </include>
    </context>

    <!-- Examples matched:
         [link label]: /folder/page.html
         [link label]: <http://www.example.com/>
         [link label]: http://www.example.com/ "Title"
         [link label]: http://www.example.com/ 'Title'
         [link label]: http://www.example.com/ (Title)

         Example NOT matched:
         [^link label]: /folder/page.html
    -->
    <context id="link-definition"> <!-- OK -->
      <match extended="true">
        ^[ ]{0,3}                     # Maximum 3 spaces at the beginning of the line.
        (\[)(?!\^)(.+?)(\])(:)        # Link label and colon.
        [ \t]*                        # Optional spaces or tabs.
        (&lt;([^ \t]+?)&gt; |         # URL with brackets.
        ([^ \t]+?))                   # URL without brackets.
        ([ \t]+(["'\(].*?["'\)]))?    # Optional title.
        [ \t]*$                       # Optional trailing spaces or tabs.
      </match>

      <include>
      	<context sub-pattern="1" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="3" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="7" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="9" style-ref="attribute-value"/>
      </include>
    </context>

    <!-- Examples matched:
         ![alt text](http://www.example.com/image.jpg)
         ![alt text] (/path/to/image.jpg "Title")
         ![alt text] (/path/to/image.jpg 'Title')

         Example NOT matched:
         ![^alt text](http://www.example.com/image.jpg)
    -->
    <context id="inline-image"> <!-- OK -->
      <match extended="true">
        (?&lt;!\[)(!)                        # Leading ! sign.
        (\[)(?!\^)(.*?)(\])[ ]?    # Alternate text for the image (and optional space).
        (\()                       # Literal parenthesis.
          [ \t]*                   # Optional spaces or tabs after the opening parenthesis.
          (([^ \t]*?) |            # Image path or URL (no title).
          ([^ \t]+?)[ \t]+(".*?")) # Image path or URL and title.
          [ \t]*                   # Optional spaces or tabs before the closing parenthesis.
        (\))                       # Literal parenthesis.
      </match>

      <include>
        <context sub-pattern="1" class="no-spell-check" style-ref="image-marker"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="3" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="5" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="7" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="8" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="9" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="10" class="no-spell-check" style-ref="image-brackets"/>
      </include>
    </context>

    <!-- Examples matched:
         ![alt text][image label]
         ![alt text] [image label]

         Examples NOT matched:
         ![^alt text][image label]
         ![alt text][^image label]
    -->
    <context id="reference-image">
      <match>(?&lt;!\[)(!)(\[)(?!\^)(.*?)(\])[ ]?(\[)(?!\^)(.*?)(\])</match>

      <include>
        <context sub-pattern="1" class="no-spell-check" style-ref="image-marker"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="3" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="5" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="7" class="no-spell-check" style-ref="image-brackets"/>
      </include>
    </context>
    
    
    <!--Examples matched:
    	[![alt text](image path "title")](link url "title")    
    -->
    
    <context id="image-with-link-1">
      <match extended="true">
      	(\[)  # Opening link-bracket
  		(!)(\[)(?!\^)(.*?)(\])[ ]?(\()[ \t]*(([^ \t]*?)|([^ \t]+?)[ \t]+(".*?"))[ \t]*(\))  # Inline-image syntax
  		(\])  # Closing link-bracket
		(\()[ \t]*(&lt;(.*?)&gt;|(.*?))([ \t]+(".*?"))?[ \t]*(\))  # Link-url syntax
      </match>

      <include>
        <context sub-pattern="1" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="image-marker"/>
        <context sub-pattern="3" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="5" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="8" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="9" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="10" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="11" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="12" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="13" style-ref="link-brackets"/>
        <context sub-pattern="15" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="16" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="18" style-ref="attribute-value"/>
        <context sub-pattern="19" style-ref="link-brackets"/>
      </include>
    </context>    
    
    <!--Examples matched:
    	[![alt text](image path "title")][link label]   
    -->
    
    <context id="image-with-link-2">
      <match extended="true">
      	(\[)  # Opening link-bracket
  		(!)(\[)(?!\^)(.*?)(\])[ ]?(\()[ \t]*(([^ \t]*?)|([^ \t]+?)[ \t]+(".*?"))[ \t]*(\))  # Inline-image syntax
      	(\])  # Closing link-bracket
      	[ \t]?  # Zero or one spaces/tabs
      	(\[)(?!\^)(.*?)(\]) # Link-label syntax
  	</match>

      <include>
        <context sub-pattern="1" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="image-marker"/>
        <context sub-pattern="3" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="5" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="8" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="9" class="no-spell-check" style-ref="link-url"/>
        <context sub-pattern="10" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="11" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="12" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="13" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="14" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="15" class="no-spell-check" style-ref="link-brackets"/>
      </include>
    </context>
    
    <context id="image-with-link-3">
      <match extended="true">
      	(\[)  # Opening link-bracket
      	(!)(\[)(?!\^)(.*?)(\])[ ]?(\[)(?!\^)(.*?)(\])  # Reference-image syntax
      	(\])  # Closing link-bracket
      	[ \t]?  # Zero or one spaces/tabs
      	(\[)(?!\^)(.*?)(\]) # Link-label syntax
  	</match>

      <include>
        <context sub-pattern="1" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="image-marker"/>
        <context sub-pattern="3" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="4" class="no-spell-check" style-ref="attribute-value"/>
        <context sub-pattern="5" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="6" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="7" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="8" class="no-spell-check" style-ref="image-brackets"/>
        <context sub-pattern="9" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="10" class="no-spell-check" style-ref="link-brackets"/>
        <context sub-pattern="11" class="no-spell-check" style-ref="link-label"/>
        <context sub-pattern="12" class="no-spell-check" style-ref="link-brackets"/>
      </include>
    </context>
    

    <!-- Examples generating an emphasis with Markdown Extra:
         Lorem _ipsum dolor_ sit amet.
         Here's an _emphasized text containing an underscore (\_)_.

         Example NOT generating an emphasis with Markdown Extra:
         The file name is "my_text_file.txt".
    -->
    <!-- Note: according to the Markdown Extra syntax, underscores in the middle
         of a word no longer generate an emphasis. -->
    <context id="underscores-emphasis" style-ref="emphasis">
      <match>(?&lt;![a-zA-Z0-9_])_[^_ \t].*?(?&lt;!\\|_| |\t)_(?![a-zA-Z0-9_])</match>
    </context>

    <!-- Examples generating a strong emphasis with Markdown Extra:
         Lorem __ipsum dolor__ sit amet.
         Here's a __strongly emphasized text containing an underscore (\_)__.

         Example NOT generating a strong emphasis with Markdown Extra:
         The file name is "my__text__file.txt".
    -->
    <context id="underscores-strong-emphasis" style-ref="strong-emphasis">
      <match>(?&lt;![a-zA-Z0-9])__[^_ \t].*?(?&lt;!\\|_| |\t)__(?![a-zA-Z0-9])</match>
    </context>

    <!-- ____________________ Markdown Extra contexts. ____________________ -->
    
    <!-- Example:
         {: .v-center .sci .mci .gallery .video}
     -->

    <context id="custom-attributes" end-at-line-end="true"> <!-- OK -->
      <start>(?&lt;=\S)[ \t]*?(\{:)</start>
      <end>\}</end>

      <include>
      	<context sub-pattern="1" where="start" style-ref="custom-attributes-braces"/>
      	<context sub-pattern="0" where="end" style-ref="custom-attributes-braces"/>
        <context style-ref="custom-attributes-gallery">
		  <match>\.gallery|\.jig</match>
		</context>
		<context style-ref="custom-attributes-video">
		  <match>\.video</match>
		</context>
		<context style-ref="custom-attributes-generic">
		  <match>\.(?!=gallery)(?!=video)(\S+\b)?</match>
		</context>
      </include>
    </context>

    <!-- Example:
         Header 2 {#id}
         ========
    -->
    <!-- Note: line break can't be used in regex, so only the id attribute is matched. -->
    <context id="setext-header-id-attribute">
      <match>\%{header-id-attribute}$</match>

      <include>
        <context sub-pattern="1" style-ref="header-id-marker"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="attribute-value"/>
      </include>
    </context>

    <!-- Example:
         Word
         : definition
    -->
    <!-- Note: line break can't be used in regex, so only the line containing
         the colon is matched. -->
    <context id="definition-list">
      <match>^ {0,3}(:)[ \t]+</match>

      <include>
        <context sub-pattern="1" style-ref="definition-list-marker"/>
      </include>
    </context>

    <!-- Example:
         ~~~
         <em>HTML code</em> displayed <strong>literally</strong>.
         ~~~
    -->
    <context id="fenced-code-block" class="no-spell-check" style-ref="code">
      <start>^(~{3,})[ \t]*$</start>
      <end>^(\%{1@start})[ \t]*$</end>
    </context>

    <!-- Example:
         A sentence containing a link to a footnote[^1].

         [^1]: That's the footnote.
    -->
    <context id="footnote-reference">
      <match>\[(\^)(.+?)\]</match>

      <include>
        <context sub-pattern="1" style-ref="footnote-marker"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="attribute-value"/>
      </include>
    </context>

    <!-- Example:
         *[PCRE]: Perl Compatible Regular Expression
    -->
    <context id="abbreviation">
      <match>^ {0,3}(\*)\[(.+?)\] ?:(.*)</match>

      <include>
        <context sub-pattern="1" style-ref="abbreviation-marker"/>
        <context sub-pattern="2" class="no-spell-check" style-ref="abbreviation"/>
        <context sub-pattern="3" style-ref="attribute-value"/>
      </include>
    </context>

    <!-- Example:
         | Header 1 | Header 2 |
         | -        | -        |
         | Cell     | Cell     |
         | Cell     | Cell     |
    -->
    <!-- Note: line break can't be used in regex, so only the separator line is
         matched. -->
    <context id="table-separator" style-ref="table-separator">
      <match extended="true">
        ^[ ]{0,3}          # Maximum 3 spaces at the beginning of the line.
        (
          \|[ \t]*:?-+:? | # Separator with leading pipe.
          :?-+:?[ \t]*\|   # Separator without leading pipe.
        )
        [ \t-:|]*$         # Optional separator characters.
      </match>
    </context>

    <context id="backslash-escape-extra" style-ref="backslash-escape">
      <match>\\[:|]</match>
    </context>
    
    
    
    <!-- ______________________Custom code blocks__________________________ -->
    
    
    
    <context id="code-block-html" end-at-line-end="false" style-inside="true">
      <start>^```language-html[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="html:html"/>
      </include>
    </context>
    
    <context id="code-block-css" end-at-line-end="false" style-inside="true">
      <start>^```language-css[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="css:css"/>
      </include>
    </context>
    
    <context id="code-block-javascript" end-at-line-end="false" style-inside="true">
      <start>^```language-javascript[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="js:js"/>
      </include>
    </context>
    
    <context id="code-block-php" end-at-line-end="false" style-inside="true">
      <start>^```language-php[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="php:php"/>
      </include>
    </context>
    
    <context id="code-block-python" end-at-line-end="false" style-inside="true">
      <start>^```language-python[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="python3:python3"/>
      </include>
    </context>

    <context id="code-block-java" end-at-line-end="false" style-inside="true">
      <start>^```language-java[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="java:java"/>
      </include>
    </context>
    
    <context id="code-block-c" end-at-line-end="false" style-inside="true">
      <start>^```language-c[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="c:c"/>
      </include>
    </context>
    
    <context id="code-block-c-sharp" end-at-line-end="false" style-inside="true">
      <start>^```language-csharp[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="c-sharp:c-sharp"/>
      </include>
    </context>
    
    <context id="code-block-cpp" end-at-line-end="false" style-inside="true">
      <start>^```language-cpp[ \t]*$</start>
      <end>^```$</end>

      <include>
      	<context sub-pattern="0" where="start" style-ref="language-code-block"/>
      	<context sub-pattern="0" where="end" style-ref="language-code-block"/>
        <context ref="cpp:cpp"/>
      </include>
    </context>
    
    
    
    
    <!-- ______________________Contexts list__________________________ -->
    
    
    

    <context id="markdown-syntax">
      <include>
        <!-- Markdown contexts -->
        <!-- Evaluated -->
        <context ref="code-block-html"/>
        <context ref="code-block-css"/>
        <context ref="code-block-javascript"/>
        <context ref="code-block-php"/>
        <context ref="code-block-python"/>
        <context ref="code-block-java"/>
        <context ref="code-block-c"/>
        <context ref="code-block-c-sharp"/>
        <context ref="code-block-cpp"/>
        
      	<context ref="ipsum"/>
        <context ref="atx-header"/>
        <context ref="inline-link"/>
        <context ref="automatic-link"/>
        <context ref="reference-link"/>
        <context ref="link-definition"/>
        <context ref="inline-image"/>
        <context ref="reference-image"/>
        <context ref="custom-attributes"/>
        <context ref="image-with-link-1"/>
        <context ref="image-with-link-2"/>
        <context ref="image-with-link-3"/>

        
        <context ref="setext-header"/>
        <context ref="horizontal-rule"/>
        <context ref="list"/>
        <context ref="code-block"/>
        <context ref="1-backtick-code-span"/>
        <context ref="2-backticks-code-span"/>
        <context ref="blockquote"/>
        
        
        
        <context ref="underscores-emphasis"/>
        <context ref="asterisks-emphasis"/>
        <context ref="underscores-strong-emphasis"/>
        <context ref="asterisks-strong-emphasis"/>
        <context ref="backslash-escape"/>
        <context ref="line-break"/>

        <!-- Markdown Extra contexts. -->
        <context ref="setext-header-id-attribute"/>
        <context ref="definition-list"/>
        <context ref="fenced-code-block"/>
        <context ref="footnote-reference"/>
        <context ref="abbreviation"/>
        <context ref="table-separator"/>
        <context ref="backslash-escape-extra"/>
        
      </include>
    </context>

    <context id="markdown-extra-tech">
      <include>
        <context ref="markdown-syntax"/>
      </include>
    </context>
  </definitions>
</language>
